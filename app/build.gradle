apply plugin: 'com.android.application'

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    //buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "br.com.githubrepos"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //Enabling Java 8 features caused deadly slow build: http://stackoverflow.com/a/42291280
        //Jack is required to support java 8 language features
        //jackOptions {
        //    enabled true
        //}
    }

    //Enabling Java 8 features caused deadly slow build: http://stackoverflow.com/a/42291280
    //compileOptions {
    //    targetCompatibility 1.8
    //    sourceCompatibility 1.8
    //}

    buildTypes {
        debug {
            // Run code coverage reports by default on debug builds.

            // AndroidStudio Debugger unable to find the local variable defined in method definition
            // "Cannot find local variable 'variable'"
            // Set testCoverageEnabled = false to fix this issue.
            testCoverageEnabled = false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "version"
    productFlavors {
        mock {
            dimension "version"
            applicationIdSuffix = ".mock"
            versionNameSuffix "-mock"
        }
        prod {
            dimension "version"
            applicationIdSuffix = ".prod"
            versionNameSuffix "-prod"
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    sourceSets {
        mock { java.srcDirs = ['src/mock/java', 'src/mock/java/'] }
        prod { java.srcDirs = ['src/prod/java', 'src/prod/java/'] }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // APP'S DEPENDENCIES
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"

    // RETROFIT
    implementation "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.ext.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava:$rootProject.ext.retrofitVersion"

    // OKHTTP
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttpVersion"

    // PICASSO
    implementation "com.squareup.picasso:picasso:$rootProject.picassoVersion"

    // GUAVA
    implementation "com.google.guava:guava:$rootProject.guavaVersion"

    // BUTTERKNIFE
    implementation "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"

    // ESPRESSO IDLING RESOURCES
    implementation "com.android.support.test.espresso:espresso-idling-resource:$rootProject.ext.espressoVersion"

    // LOCAL UNIT TESTS
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito:$rootProject.ext.powerMockVersion"
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"

    // ANDROID TESTING SUPPORT LIBRARY'S RUNNER AND RULES
    androidTestImplementation "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestImplementation "com.android.support.test:rules:$rootProject.ext.rulesVersion"

    // ESPRESSO UI TESTING DEPENDENCIES
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.implementation.dependencies.each { implementationDependency ->
    println "Excluding implementation dependency: ${implementationDependency.getName()}"
    configurations.androidTestImplementation.dependencies.each { androidTestImplementationDependency ->
        configurations.androidTestImplementation.exclude module: "${implementationDependency.getName()}"
    }
}